opt_out_type {
    package = "*"
    superClass = "*"
    interfaces = []
    class = "*"
    methods = []
}
empty_type {
    type = ""
    package = "*"
    superClass = "*"
    interfaces = []
    class = "*"
    methods = []
}
unknown_type {
    type = "unknown"
    package = "*"
    superClass = "*"
    interfaces = []
    class = "*"
    methods = []
}
typeTrace {
    type = "trace"
    package = "*"
    superClass = "*"
    interfaces = []
    class = "*"
    methods = []
}
typeDefault {
    type = "default"
    package = "*"
    superClass = "*"
    interfaces = []
    class = "*"
    methods = []
    enter = "*"
    exit = "*"
}
typeDescriptor {
    type = "descriptor"
    package = "*"
    superClass = "*"
    interfaces = []
    class = "*"
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}

opt_out_package {
    type = "default"
    superClass = "*"
    interfaces = []
    class = "*"
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
empty_package {
    type = "default"
    package = ""
    superClass = "*"
    interfaces = []
    class = "*"
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"

}
all_package {
    type = "default"
    package = "*"
    superClass = "*"
    interfaces = []
    class = "*"
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
value_package {
    type = "default"
    package = "package"
    superClass = "*"
    interfaces = []
    class = "*"
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}

opt_out_super_class {
    type = "default"
    package = "*"
    interfaces = []
    class = "*"
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
empty_super_class {
    type = "default"
    package = "*"
    superClass = ""
    interfaces = []
    class = "*"
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
all_super_class {
    type = "default"
    package = "*"
    superClass = "*"
    interfaces = []
    class = "*"
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
value_super_class {
    type = "default"
    package = "*"
    superClass = "superClass"
    interfaces = []
    class = "*"
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}

opt_out_class {
    type = "default"
    package = "*"
    superClass = "*"
    interfaces = []
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
empty_class {
    type = "default"
    package = "package"
    superClass = "*"
    class = ""
    interfaces = []
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
all_class {
    type = "default"
    package = "package"
    superClass = "*"
    class = "*"
    interfaces = []
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
value_class {
    type = "default"
    package = "*"
    superClass = "*"
    class = "class"
    interfaces = []
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}

opt_out_methods {
    type = "default"
    package = "*"
    superClass = "*"
    class = "*"
    interfaces = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
invalid_methods {
    type = "default"
    package = "package"
    superClass = "*"
    class = "*"
    methods = ""
    interfaces = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
all_methods {
    type = "default"
    package = "package"
    superClass = "*"
    class = "*"
    methods = []
    interfaces = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
value_methods {
    type = "default"
    package = "*"
    superClass = "*"
    class = "*"
    methods = ["method"]
    interfaces = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}

opt_out_interfaces {
    type = "default"
    package = "*"
    superClass = "*"
    class = "*"
    methods = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
invalid_interfaces {
    type = "default"
    package = "package"
    superClass = "*"
    class = "*"
    methods = []
    interfaces = ""
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
all_interfaces {
    type = "default"
    package = "package"
    superClass = "*"
    class = "*"
    methods = []
    interfaces = []
    descriptor = "()V"
    enter = "*"
    exit = "*"
}
value_interfaces {
    type = "default"
    package = "*"
    superClass = "*"
    class = "*"
    methods = []
    interfaces = ["interface"]
    descriptor = "()V"
    enter = "*"
    exit = "*"
}